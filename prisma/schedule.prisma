model CoachAvailability {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    coachId String @db.ObjectId

    slotDate  DateTime
    startTime DateTime
    endTime   DateTime
    isActive  Boolean  @default(false)

    coach     Coach      @relation(fields: [coachId], references: [id])
    timeSlots TimeSlot[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([coachId, slotDate])
    @@map("coach_availabilities")
}

model TimeSlot {
    id             String     @id @default(auto()) @map("_id") @db.ObjectId
    availabilityId String     @db.ObjectId
    startTime      DateTime
    endTime        DateTime
    isBooked       Boolean    @default(false)
    status         SlotStatus @default(ACTIVE)

    availability CoachAvailability @relation(fields: [availabilityId], references: [id])
    bookings     Booking[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("time_slots")
}

// enum DayOfWeek {
//     MONDAY 
//     TUESDAY
//     WEDNESDAY
//     THURSDAY
//     FRIDAY
//     SATURDAY
//     SUNDAY
// }

enum SlotStatus {
    ACTIVE
    INACTIVE
}

// Booking: Specific instance of a booking (date + slot, with status for workflow)
model Booking {
    id               String        @id @default(auto()) @map("_id") @db.ObjectId
    athleteId        String        @db.ObjectId
    coachId          String        @db.ObjectId
    timeSlotId       String?       @db.ObjectId
    bookingDate      DateTime
    status           BookingStatus @default(CONFIRMED) // Workflow status
    rescheduleFromId String?       @db.ObjectId // Link to old booking for reschedule
    notes            String?

    athlete         Athlete   @relation(fields: [athleteId], references: [id])
    coach           Coach     @relation(fields: [coachId], references: [id])
    timeSlot        TimeSlot? @relation(fields: [timeSlotId], references: [id])
    // Self-relation for chain
    rescheduledFrom Booking?  @relation("RescheduleChain", fields: [rescheduleFromId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    booking         Booking[] @relation("RescheduleChain")
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    review          Review?

    @@map("bookings")
}

enum BookingStatus {
    CONFIRMED
    RESCHEDULE_REQUEST // Reschedule request from athlete (linked to old booking)
    RESCHEDULED_ACCEPTED // Reschedule accepted by coach
    RESCHEDULED_CANCELED // Reschedule canceled by coach
    CANCELLED // Booking cancelled by athlete or coach
    FINISHED // Session completed 
}
